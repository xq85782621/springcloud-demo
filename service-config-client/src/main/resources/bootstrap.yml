# spring会先读取 bootstrap.yml配置文件,如果有去配置中心拉取配置文件,不存在的话才会去找 application.yml

spring:
  application:
    name: service-config-client
  #会从配置中心,取 mz-service-goods-dev 的配置文件
  cloud:
    config:
      discovery:
        enabled: true
        service-id: govern-config  #config工程的工程名
      profile: dev
      uri: http://localhost:20010  # 配置中心的url

      # 假如本服务名是 service-config-client  ,但是配置文件叫做 config-client.yml  这个时候需要配置name 为 config-client
      # name 的作用是用来防止 github 里的配置文件名字和应用名不一样的情况
      # name: config-client

      # 因为配置中心加入了security依赖,所以需要用户名密码访问
      username: admin
      password: 123

# 在当前服务加载配置文件的时候,会同时加载 service-config-client.yml 和 service-config-client-dev.yml ,然后进行合并
# 利用这个特性,我们可以把相同配置抽取到不带后缀的配置文件中



# 为什么这里需要配eureka地址
# 1.首先启动eureka服务
# 2.再启动config-server 服务
# 3.启动config-client服务的时候,会通过该配置文件(bootstrap.yml),去注册中心找到config服务的一个实例
# 如果不在bootstrap.yml配置文件配置eureka地址,通过bootstrap.yml 根本无法把自身注册到eureka中,当然也就找不到config实例了
eureka:
  client:
    service-url: # EurekaServer地址
      defaultZone: http://admin:123@localhost:10086/eureka
  instance:
    prefer-ip-address: true # 当调用getHostname获取实例的hostname时，返回ip而不是host名称
    ip-address: 127.0.0.1 # 指定自己的ip信息，不指定的话会自己寻找
    instance-id: service-config-client:${server.port}
